using Microsoft.VisualStudio.TestTools.UnitTesting;
using log4net.Config;
using com.bellarosa.ia.neuronalnetwork.image;
using System.Collections.Generic;
using System;

namespace com.bellarosa.ia.neuronalnetwork.number.image.Tests
{
    [TestClass()]
    public class ImageDataExtractionNeuronTests
    {
        #region Initializer / Cleanup
        [ClassInitialize]
        public static void classInitialize(TestContext testContext)
        {
            XmlConfigurator.Configure();
        }
        #endregion

        #region Tests
        [TestMethod()]
        public void processTest()
        {
            byte[] referenceBytetable = new byte[] {
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,0,0, 0,0,0,0,0, 0,0,0,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,0,0, 0,0,0,0,0, 0,0,0,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,0,0,0,0, 0,0,0,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,0,0,0,0, 0,0,0,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,0,0, 0,0,0,0,0, 0,0,0,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,0,0, 0,0,0,0,0, 0,0,0,0,0, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,
                255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255,255,255, 255,255,255 };

            ImageData testImage = new ImageData(@".\resources\3.bmp");
            byte[] neuronResult = (byte[])new ImageDataExtractionNeuron().process(new Dictionary<int, object> { { 1, testImage.Data } });
            CollectionAssert.AreEqual(referenceBytetable, neuronResult, "Test extract");
        }

        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void processTestArgumentNull()
        {
            new ImageDataExtractionNeuron().process(null);
        }

        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void processTestArgumentDataNull()
        {
            byte[] nullByteArray = null;
            new ImageDataExtractionNeuron().process(new Dictionary<int, object> { { 1, nullByteArray } });
        }
        #endregion
    }
}